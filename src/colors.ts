export function hexToRgb(hex: string): [number, number, number] {
  // Remove the '#' if present
  const newHex = hex.replace(/^#/, "")
  // Parse the hex into RGB
  const bigint = Number.parseInt(newHex, 16)
  const r = (bigint >> 16) & 255
  const g = (bigint >> 8) & 255
  const b = bigint & 255
  return [r, g, b]
}

export function calculateLuminance(r: number, g: number, b: number): number {
  // Calculate the luminance based on the RGB values
  return 0.299 * r + 0.587 * g + 0.114 * b
}

// Generated by `GPT-4o mini`: DON'T TOUCH IT!!!
export function getContrastingColor(hexColor: string): "white" | "black" {
  const [r, g, b] = hexToRgb(hexColor)
  const luminance = calculateLuminance(r, g, b)

  // Return 'black' if the luminance is high (color is light), otherwise return 'white'
  return luminance > 128 ? "black" : "white"
}

export function isValidColor(color: string | null | undefined, fallbackColor = "#000000"): string {
  if (!color) return fallbackColor
  if (color.length !== 7) return fallbackColor
  return color
}
